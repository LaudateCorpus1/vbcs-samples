{
  "paths": {
    "exclude": [
    ]
  },
  "rules": {
    "oj-html-cspexpr": {
       "description": "Attribute 'value' contains an expression that may not be compatible with all Content Security policies: Expected expression after = at attribute value -> the csp expression evaluator does not support arrow function syntax",
      "enabled": false
    },
    "translations.audit.propertyNotTranslated": {
      "enabled": false
    },
    "translations.audit.page.json.valueNotTranslated" : {
      "enabled": false
    },
    "oj-html-ko-comment": {
      "description": "Knockout comment binding \"if:\" found. Use of JET <oj-bind-if> recommended.",
      "enabled": false
    },
    "jshint.W033": {
      "description": "Missing semicolon.",
      "enabled": false
    },
    "json#unused_import" : {
      "description": "Unused components dependency",
      "enabled": false
    },
    "csp-html-style-unsafe-inline": {
      "description": "<b>CSP-1030:</b><br>Embedding styles into HTML using &lt;style&gt; tags is a CSP violation.<br>For example, the following implementation will be blocked:<p><b>&lt;style&gt;<br> &nbsp; &nbsp; #inline-style { background: red }<br>&lt;/style&gt;</b><p>The general solution is to extract the styles into a style sheet and reference it in the HTML using <b>&lt;link href=\". . .\"&gt;</b><b><p>CSP-1031:</b><br>Setting a style attribute directly on element, e.g.<b>&lt;div style=\". . .\"&gt;</b> is a CSP violation.<p>The general solution is to set properties directly on the element's style property, e.g.<br><b>element.style.display = \"none\"</b><p>Alternatively, styles can be added by changing to a class and including the class in the HTML element.",
      "enabled": false
    }
  },
  "auditors": {}
}